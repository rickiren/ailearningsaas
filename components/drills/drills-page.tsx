'use client';

import { useState, useEffect } from 'react';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';
import { Plus, Search, Filter, Code, Save } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { DrillListSidebar } from './drill-list-sidebar';
import { DrillPreview } from './drill-preview';
import { DrillChatSidebar } from './drill-chat-sidebar';
import { ArtifactRenderer } from './artifact-renderer';
import { DrillType } from '@/types/drills';
import { useDrillStore } from '@/lib/drill-store';

export function DrillsPage() {
  const { currentDrill, setCurrentDrill, loadDrills, isLoading } = useDrillStore();
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState<DrillType | 'all'>('all');
  const [currentArtifact, setCurrentArtifact] = useState<{
    language: 'html' | 'jsx' | 'javascript';
    code: string;
    timestamp: number;
  } | null>(null);

  // Load drills from database when component mounts
  useEffect(() => {
    loadDrills();
  }, [loadDrills]);

  const handleCreateNewDrill = () => {
    // This will be handled by the chat sidebar
    console.log('Create new drill');
  };

  const handleArtifactUpdate = (artifact: {
    language: 'html' | 'jsx' | 'javascript';
    code: string;
    timestamp: number;
  } | null) => {
    setCurrentArtifact(artifact);
  };

  const renderCenterPanel = () => {
    if (currentDrill) {
      return <DrillPreview drill={currentDrill} />;
    }

    if (currentArtifact) {
      return (
        <div className="h-full flex flex-col bg-background">
          {/* Artifact Header */}
          <div className="flex items-center justify-between p-4 border-b bg-background">
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <span className="px-2 py-1 bg-primary/10 text-primary text-xs rounded-full font-medium">
                  {currentArtifact.language.toUpperCase()}
                </span>
                <span className="text-sm text-muted-foreground">
                  Generated Artifact
                </span>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={async () => {
                  try {
                    // Save the artifact as a drill using the store
                    const newDrillId = await useDrillStore.getState().addDrill({
                      title: `Generated ${currentArtifact.language.toUpperCase()} Drill`,
                      description: `Interactive ${currentArtifact.language.toUpperCase()} drill generated by AI`,
                      type: currentArtifact.language === 'html' ? 'html' : 'jsx',
                      skillName: currentArtifact.language === 'html' ? 'HTML/CSS/JS' : 'React',
                      learningObjectives: [
                        'Practice interactive coding',
                        'Learn through hands-on experience',
                        'Understand real-world application'
                      ],
                      difficulty: 'beginner',
                      estimatedTime: 15,
                      code: currentArtifact.code,
                      metadata: {
                        projectId: undefined,
                        skillAtomIds: [],
                        tags: ['ai-generated', currentArtifact.language],
                      },
                    });
                    
                    // Get the newly created drill and set it as current
                    const newDrill = useDrillStore.getState().getDrillById(newDrillId);
                    if (newDrill) {
                      setCurrentDrill(newDrill);
                    }
                    setCurrentArtifact(null);
                  } catch (error) {
                    console.error('Failed to save drill:', error);
                    // You could add a toast notification here
                  }
                }}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                <Save className="h-4 w-4 mr-2" />
                Save as Drill
              </Button>
            </div>
          </div>

          {/* Artifact Content */}
          <div className="flex-1 overflow-hidden">
            <ArtifactRenderer
              language={currentArtifact.language}
              code={currentArtifact.code}
              className="h-full"
            />
          </div>
        </div>
      );
    }

    return (
      <div className="h-full flex items-center justify-center bg-muted/5">
        <div className="text-center">
          <Code className="h-16 w-16 mx-auto mb-4 text-muted-foreground/50" />
          <h3 className="text-lg font-medium text-muted-foreground mb-2">No Drill Selected</h3>
          <p className="text-sm text-muted-foreground">
            Select a drill from the sidebar, create a new one, or start chatting with the AI to generate artifacts
          </p>
        </div>
      </div>
    );
  };

  return (
    <div className="h-screen bg-background flex flex-col">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-background">
        <div className="flex items-center space-x-4">
          <h1 className="text-2xl font-bold">Drills</h1>
          {isLoading && (
            <div className="flex items-center space-x-2 text-sm text-muted-foreground">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
              <span>Loading drills...</span>
            </div>
          )}
          <div className="flex items-center space-x-2">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search drills..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 w-64"
              />
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setFilterType(filterType === 'all' ? 'html' : 'all')}
              className="flex items-center space-x-2"
            >
              <Filter className="h-4 w-4" />
              {filterType === 'all' ? 'All Types' : filterType.toUpperCase()}
            </Button>
          </div>
        </div>
        <Button onClick={handleCreateNewDrill} className="flex items-center space-x-2">
          <Plus className="h-4 w-4" />
          Create New Drill
        </Button>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-hidden">
        <PanelGroup direction="horizontal" className="h-full">
          {/* Left Panel - Drill List Sidebar */}
          <Panel defaultSize={25} minSize={20} maxSize={40}>
            <div className="h-full bg-muted/5 border-r">
              <DrillListSidebar
                selectedDrill={currentDrill}
                onSelectDrill={setCurrentDrill}
                searchQuery={searchQuery}
                filterType={filterType}
              />
            </div>
          </Panel>

          {/* Resize Handle */}
          <PanelResizeHandle className="w-2 bg-border hover:bg-accent transition-colors relative group">
            <div className="absolute inset-y-0 left-1/2 w-0.5 bg-border group-hover:bg-primary transition-colors" />
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-1 h-8 bg-muted-foreground/30 rounded-full opacity-0 group-hover:opacity-100 transition-opacity" />
          </PanelResizeHandle>

          {/* Center Panel - Drill Preview or Artifact Renderer */}
          <Panel defaultSize={50} minSize={30}>
            <div className="h-full bg-background">
              {renderCenterPanel()}
            </div>
          </Panel>

          {/* Resize Handle */}
          <PanelResizeHandle className="w-2 bg-border hover:bg-accent transition-colors relative group">
            <div className="absolute inset-y-0 left-1/2 w-0.5 bg-border group-hover:bg-primary transition-colors" />
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-1 h-8 bg-muted-foreground/30 rounded-full opacity-0 group-hover:opacity-100 transition-opacity" />
          </PanelResizeHandle>

          {/* Right Panel - AI Chat Sidebar */}
          <Panel defaultSize={25} minSize={20} maxSize={40}>
            <div className="h-full bg-muted/10">
              <DrillChatSidebar
                selectedDrill={currentDrill}
                onDrillUpdate={(drill) => {
                  setCurrentDrill(drill);
                  setCurrentArtifact(null);
                }}
                onArtifactUpdate={handleArtifactUpdate}
              />
            </div>
          </Panel>
        </PanelGroup>
      </div>
    </div>
  );
}
